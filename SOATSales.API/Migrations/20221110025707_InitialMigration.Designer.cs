// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SOATSales.API.DbContexts;

namespace SOATSales.API.Migrations
{
    [DbContext(typeof(SOATSalesContext))]
    [Migration("20221110025707_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SOATSales.API.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsForSOAT")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b1c2b4d-48c7-402a-80c3-cc796ad49c6b"),
                            CityName = "Bogota",
                            IsForSOAT = true
                        },
                        new
                        {
                            Id = new Guid("d8663e5e-7494-4f81-8739-6e0de1bea7ee"),
                            CityName = "Cartagena",
                            IsForSOAT = true
                        },
                        new
                        {
                            Id = new Guid("d173e20d-159e-4127-9ce9-b0ac2564ad97"),
                            CityName = "Barranquilla",
                            IsForSOAT = false
                        },
                        new
                        {
                            Id = new Guid("40ff5488-fdab-45b5-bc3a-14302d59869a"),
                            CityName = "Medellin",
                            IsForSOAT = true
                        });
                });

            modelBuilder.Entity("SOATSales.API.Entities.Policy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateOfExpiration")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateOfIssue")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateOfStart")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LicencePlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("PolicyNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(14)")
                        .HasMaxLength(14);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Policies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9888"),
                            CityId = new Guid("5b1c2b4d-48c7-402a-80c3-cc796ad49c6b"),
                            DateOfExpiration = new DateTimeOffset(new DateTime(2022, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -5, 0, 0, 0)),
                            DateOfIssue = new DateTimeOffset(new DateTime(2021, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -5, 0, 0, 0)),
                            DateOfStart = new DateTimeOffset(new DateTime(2021, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -5, 0, 0, 0)),
                            FirstName = "Raul",
                            LastName = "Perez",
                            LicencePlate = "ABC547",
                            PolicyNumber = "14575000853560"
                        },
                        new
                        {
                            Id = new Guid("da2fd609-d754-4feb-8acd-c4f9ff13ba96"),
                            CityId = new Guid("d8663e5e-7494-4f81-8739-6e0de1bea7ee"),
                            DateOfExpiration = new DateTimeOffset(new DateTime(2023, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -5, 0, 0, 0)),
                            DateOfIssue = new DateTimeOffset(new DateTime(2022, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -5, 0, 0, 0)),
                            DateOfStart = new DateTimeOffset(new DateTime(2022, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -5, 0, 0, 0)),
                            FirstName = "Nancy",
                            LastName = "Garcerant",
                            LicencePlate = "ABC888",
                            PolicyNumber = "14579000853599"
                        },
                        new
                        {
                            Id = new Guid("2902b665-1190-4c70-9915-b9c2d7680450"),
                            CityId = new Guid("40ff5488-fdab-45b5-bc3a-14302d59869a"),
                            DateOfExpiration = new DateTimeOffset(new DateTime(2023, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -5, 0, 0, 0)),
                            DateOfIssue = new DateTimeOffset(new DateTime(2022, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -5, 0, 0, 0)),
                            DateOfStart = new DateTimeOffset(new DateTime(2022, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -5, 0, 0, 0)),
                            FirstName = "Pedro",
                            LastName = "Pabon",
                            LicencePlate = "ABC999",
                            PolicyNumber = "34579000850000"
                        },
                        new
                        {
                            Id = new Guid("102b566b-ba1f-404c-b2df-e2cde39ade09"),
                            CityId = new Guid("40ff5488-fdab-45b5-bc3a-14302d59869a"),
                            DateOfExpiration = new DateTimeOffset(new DateTime(2022, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -5, 0, 0, 0)),
                            DateOfIssue = new DateTimeOffset(new DateTime(2021, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -5, 0, 0, 0)),
                            DateOfStart = new DateTimeOffset(new DateTime(2021, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -5, 0, 0, 0)),
                            FirstName = "Arnold",
                            LastName = "Hernandez",
                            LicencePlate = "ABC007",
                            PolicyNumber = "88769000850022"
                        });
                });

            modelBuilder.Entity("SOATSales.API.Entities.Policy", b =>
                {
                    b.HasOne("SOATSales.API.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
